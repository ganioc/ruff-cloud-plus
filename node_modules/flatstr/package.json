{
  "_args": [
    [
      {
        "raw": "flatstr@^1.0.4",
        "scope": null,
        "escapedName": "flatstr",
        "name": "flatstr",
        "rawSpec": "^1.0.4",
        "spec": ">=1.0.4 <2.0.0",
        "type": "range"
      },
      "/home/nanchao/server/ruff-cloud-plus/node_modules/pino"
    ]
  ],
  "_from": "flatstr@>=1.0.4 <2.0.0",
  "_id": "flatstr@1.0.5",
  "_inCache": true,
  "_location": "/flatstr",
  "_nodeVersion": "6.10.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/flatstr-1.0.5.tgz_1491915948643_0.30509605444967747"
  },
  "_npmUser": {
    "name": "davidmarkclements",
    "email": "huperekchuno@googlemail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "flatstr@^1.0.4",
    "scope": null,
    "escapedName": "flatstr",
    "name": "flatstr",
    "rawSpec": "^1.0.4",
    "spec": ">=1.0.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pino"
  ],
  "_resolved": "https://registry.npmjs.org/flatstr/-/flatstr-1.0.5.tgz",
  "_shasum": "5b451b08cbd48e2eac54a2bbe0bf46165aa14be3",
  "_shrinkwrap": null,
  "_spec": "flatstr@^1.0.4",
  "_where": "/home/nanchao/server/ruff-cloud-plus/node_modules/pino",
  "author": {
    "name": "David Mark Clements"
  },
  "bugs": {
    "url": "https://github.com/davidmarkclements/flatstr/issues"
  },
  "dependencies": {},
  "description": "Flattens the underlying C structures of a concatenated JavaScript string",
  "devDependencies": {
    "fastbench": "^1.0.1",
    "tap": "^5.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "5b451b08cbd48e2eac54a2bbe0bf46165aa14be3",
    "tarball": "https://registry.npmjs.org/flatstr/-/flatstr-1.0.5.tgz"
  },
  "gitHead": "1e1354c85c4a3bf37aafb9c20183d9bc9cf47969",
  "homepage": "https://github.com/davidmarkclements/flatstr#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "davidmarkclements",
      "email": "huperekchuno@googlemail.com"
    }
  ],
  "name": "flatstr",
  "optionalDependencies": {},
  "readme": "# flatstr\n\nFlattens the underlying C structures of a concatenated JavaScript string\n\n## About\n\nIf you're doing lots of string concatenation and then writing that\nstring somewhere, you may find that passing your string through \n`flatstr` vastly improves performance.\n\n## Usage\n\n```js\nvar flatstr = require('flatstr')\nflatstr(someHeavilyConcatenatedString)\n```\n\n## Benchmarks\n\nBenchmarks test flat vs non-flat strings being written to \nan `fs.WriteStream`.\n\n```\nunflattenedManySmallConcats*10000: 147.540ms\nflattenedManySmallConcats*10000: 105.994ms\nunflattenedSeveralLargeConcats*10000: 287.901ms\nflattenedSeveralLargeConcats*10000: 226.121ms\nunflattenedExponentialSmallConcats*10000: 410.533ms\nflattenedExponentialSmallConcats*10000: 219.973ms\nunflattenedExponentialLargeConcats*10000: 2774.230ms\nflattenedExponentialLargeConcats*10000: 1862.815ms\n```\n\nIn each case, flattened strings win, \nhere's the performance gains from using `flatstr`\n\n```\nManySmallConcats: 28%\nSeveralLargeConcats: 21% \nExponentialSmallConcats: 46%\nExponentialLargeConcats: 33%\n```\n\n## How does it work\n\nIn the v8 C++ layer, JavaScript strings can be represented in two ways. \n\n1. As an array\n2. As a tree\n\nWhen JavaScript strings are concatenated, tree structures are used\nto represent them. For the concat operation, this is cheaper than\nreallocating a larger array. However, performing other operations \non the tree structures can become costly (particularly where lots of\nconcatenation has occurred). \n\nV8 has a a method called `String::Flatten`which converts the tree into a C array. This method is typically called before operations that walk through the bytes of the string (for instance, when testing against a regular expression). It may also be called if a string is accessed many times over, \nas an optimization on the string. However, strings aren't always flattened. One example is when we pass a string into a `WriteStream`, at some point the string will be converted to a buffer, and this may be expensive if the underlying representation is a tree. \n\n`String::Flatten` is not exposed as a JavaScript function, but it can be triggered as a side effect. \n\nThere are several ways to indirectly call `String::Flatten` (see `alt-benchmark.js`), but coercion to a number appears to be (one of) the cheapest.\n\nHere's the code:\n\n```js\nmodule.exports = function flatstr(s) {\n  Number(s)\n  return s\n}\n```\n\nObviously, you could just use `Number` in your own code, and not use\nthis module at all. However, this module serves the purpose of preventing\nmisunderstandings in your code base (and potential removal of code that\nappears to be superfluous at first glance). Tests show that the additional\nfunction wrapper adds negligible overhead.\n\nOne final note: calling flatstr too much can in fact negatively effect performance. For instance, don't call it every time you concat (if that\nwas performant, v8 wouldn't be using trees in the first place). The best\nplace to use flatstr is just prior to passing it to an API that eventually\nruns non-v8 code (such as `fs.WriteStream`, or perhaps `xhr` or DOM apis in the browser). \n\n\n## Acknowledgements\n\n* Sponsored by nearForm\n\n## License\n\nMIT\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/davidmarkclements/flatstr.git"
  },
  "scripts": {},
  "tags": [
    "perf",
    "performance",
    "strings",
    "concatenation"
  ],
  "version": "1.0.5"
}
