{
  "_args": [
    [
      {
        "raw": "fastq@^1.3.0",
        "scope": null,
        "escapedName": "fastq",
        "name": "fastq",
        "rawSpec": "^1.3.0",
        "spec": ">=1.3.0 <2.0.0",
        "type": "range"
      },
      "/home/nanchao/server/ruff-cloud-plus/node_modules/steed"
    ]
  ],
  "_from": "fastq@>=1.3.0 <2.0.0",
  "_id": "fastq@1.5.0",
  "_inCache": true,
  "_location": "/fastq",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/fastq-1.5.0.tgz_1483910211658_0.9198376317508519"
  },
  "_npmUser": {
    "name": "matteo.collina",
    "email": "hello@matteocollina.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fastq@^1.3.0",
    "scope": null,
    "escapedName": "fastq",
    "name": "fastq",
    "rawSpec": "^1.3.0",
    "spec": ">=1.3.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/steed"
  ],
  "_resolved": "https://registry.npmjs.org/fastq/-/fastq-1.5.0.tgz",
  "_shasum": "05e32ffb999ec2d945dda27461bf08941436448b",
  "_shrinkwrap": null,
  "_spec": "fastq@^1.3.0",
  "_where": "/home/nanchao/server/ruff-cloud-plus/node_modules/steed",
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "bugs": {
    "url": "https://github.com/mcollina/fastq/issues"
  },
  "dependencies": {
    "reusify": "^1.0.0"
  },
  "description": "Fast, in memory work queue",
  "devDependencies": {
    "async": "^2.1.0",
    "neo-async": "^2.0.1",
    "pre-commit": "^1.2.2",
    "standard": "^8.6.0",
    "tap-spec": "^4.0.0",
    "tape": "^4.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "05e32ffb999ec2d945dda27461bf08941436448b",
    "tarball": "https://registry.npmjs.org/fastq/-/fastq-1.5.0.tgz"
  },
  "gitHead": "ee7f5f52a8cb6b8958c230c64ca4807e1507f2e1",
  "homepage": "https://github.com/mcollina/fastq#readme",
  "keywords": [
    "fast",
    "queue",
    "async",
    "worker"
  ],
  "license": "ISC",
  "main": "queue.js",
  "maintainers": [
    {
      "name": "matteo.collina",
      "email": "hello@matteocollina.com"
    }
  ],
  "name": "fastq",
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "test"
  ],
  "readme": "# fastq&nbsp;&nbsp;[![build status](https://secure.travis-ci.org/mcollina/fastq.png)](http://travis-ci.org/mcollina/fastq)\n\nFast, in memory work queue. `fastq` is API compatible with\n[`async.queue`](https://github.com/caolan/async#queueworker-concurrency)\n\nBenchmarks (1 million tasks):\n\n* setImmediate: 1359ms\n* fastq: 1492ms\n* async.queue: 4039ms\n* neoAsync.queue: 4476ms\n\nObtained on node 4.2.2, on a MacBook Pro 2014 (i7, 16GB of RAM).\n\nIf you need zero-overhead series function call, check out\n[fastseries](http://npm.im/fastseries). For zero-overhead parallel\nfunction call, check out [fastparallel](http://npm.im/fastparallel).\n\n[![js-standard-style](https://raw.githubusercontent.com/feross/standard/master/badge.png)](https://github.com/feross/standard)\n\n  * <a href=\"#install\">Installation</a>\n  * <a href=\"#basic\">Basic Example</a>\n  * <a href=\"#api\">API</a>\n  * <a href=\"#licence\">Licence &amp; copyright</a>\n\n## Install\n\n`npm i fastq --save`\n\n## Usage\n\n```js\n'use strict'\n\nvar queue = require('fastq')(worker, 1)\n\nqueue.push(42, function (err, result) {\n  if (err) { throw err }\n  console.log('the result is', result)\n})\n\nfunction worker (arg, cb) {\n  cb(null, 42 * 2)\n}\n```\n\n### Setting this\n\n```js\n'use strict'\n\nvar that = { hello: 'world' }\nvar queue = require('fastq')(that, worker, 1)\n\nqueue.push(42, function (err, result) {\n  if (err) { throw err }\n  console.log(this)\n  console.log('the result is', result)\n})\n\nfunction worker (arg, cb) {\n  console.log(this)\n  cb(null, 42 * 2)\n}\n```\n\n## API\n\n* <a href=\"#fastqueue\"><code>fastqueue()</code></a>\n* <a href=\"#push\"><code>queue#<b>push()</b></code></a>\n* <a href=\"#unshift\"><code>queue#<b>unshift()</b></code></a>\n* <a href=\"#pause\"><code>queue#<b>pause()</b></code></a>\n* <a href=\"#resume\"><code>queue#<b>resume()</b></code></a>\n* <a href=\"#idle\"><code>queue#<b>idle()</b></code></a>\n* <a href=\"#length\"><code>queue#<b>length()</b></code></a>\n* <a href=\"#kill\"><code>queue#<b>kill()</b></code></a>\n* <a href=\"#killAndDrain\"><code>queue#<b>killAndDrain()</b></code></a>\n* <a href=\"#concurrency\"><code>queue#<b>concurrency</b></code></a>\n* <a href=\"#drain\"><code>queue#<b>drain</b></code></a>\n* <a href=\"#empty\"><code>queue#<b>empty</b></code></a>\n* <a href=\"#saturated\"><code>queue#<b>saturated</b></code></a>\n\n-------------------------------------------------------\n<a name=\"fastqueue\"></a>\n### fastqueue([that], worker, concurrency)\n\nCreates a new queue.\n\nArguments:\n\n* `that`, optional context of the `worker` function.\n* `worker`, worker function, it would be called with `that` as `this`,\n  if that is specified.\n* `concurrency`, number of concurrent tasks that could be executed in\n  parallel.\n\n-------------------------------------------------------\n<a name=\"push\"></a>\n### queue.push(task, done)\n\nAdd a task at the end of the queue. `done(err, result)` will be called\nwhen the task was processed.\n\n-------------------------------------------------------\n<a name=\"unshift\"></a>\n### queue.unshift(task, done)\n\nAdd a task at the beginning of the queue. `done(err, result)` will be called\nwhen the task was processed.\n\n-------------------------------------------------------\n<a name=\"pause\"></a>\n### queue.pause()\n\nPause the processing of tasks. Currently worked tasks are not\nstopped.\n\n-------------------------------------------------------\n<a name=\"resume\"></a>\n### queue.resume()\n\nResume the processing of tasks.\n\n-------------------------------------------------------\n<a name=\"idle\"></a>\n### queue.idle()\n\nReturns `true` if there are tasks being processed or waiting to be processed.\n`false` otherwise.\n\n-------------------------------------------------------\n<a name=\"length\"></a>\n### queue.length()\n\nReturns the number of tasks waiting to be processed (in the queue).\n\n-------------------------------------------------------\n<a name=\"kill\"></a>\n### queue.kill()\n\nRemoves all tasks waiting to be processed, and reset `drain` to an empty\nfunction.\n\n-------------------------------------------------------\n<a name=\"killAndDrain\"></a>\n### queue.killAndDrain()\n\nSame than `kill` but the `drain` function will be called before reset to empty.\n\n-------------------------------------------------------\n<a name=\"concurrency\"></a>\n### queue.concurrency\n\nProperty that returns the number of concurrent tasks that could be executed in\nparallel. It can be altered at runtime.\n\n-------------------------------------------------------\n<a name=\"drain\"></a>\n### queue.drain\n\nFunction that will be called when the last\nitem from the queue has been processed by a worker.\nIt can be altered at runtime.\n\n-------------------------------------------------------\n<a name=\"empty\"></a>\n### queue.empty\n\nFunction that will be called when the last\nitem from the queue has been assigned to a worker.\nIt can be altered at runtime.\n\n-------------------------------------------------------\n<a name=\"saturated\"></a>\n### queue.saturated\n\nFunction that will be called when the queue hits the concurrency\nlimit.\nIt can be altered at runtime.\n\n## License\n\nISC\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mcollina/fastq.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "tape test.js | tap-spec"
  },
  "version": "1.5.0"
}
