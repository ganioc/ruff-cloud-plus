{
  "_args": [
    [
      {
        "raw": "pull-pushable@^2.0.0",
        "scope": null,
        "escapedName": "pull-pushable",
        "name": "pull-pushable",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/home/nanchao/server/ruff-cloud-plus/node_modules/pull-level"
    ]
  ],
  "_from": "pull-pushable@>=2.0.0 <3.0.0",
  "_id": "pull-pushable@2.1.1",
  "_inCache": true,
  "_location": "/pull-pushable",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/pull-pushable-2.1.1.tgz_1494973626402_0.847786377184093"
  },
  "_npmUser": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pull-pushable@^2.0.0",
    "scope": null,
    "escapedName": "pull-pushable",
    "name": "pull-pushable",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pull-level"
  ],
  "_resolved": "https://registry.npmjs.org/pull-pushable/-/pull-pushable-2.1.1.tgz",
  "_shasum": "86666abbe3f5402f1f7ead03eefd69b785eca5b8",
  "_shrinkwrap": null,
  "_spec": "pull-pushable@^2.0.0",
  "_where": "/home/nanchao/server/ruff-cloud-plus/node_modules/pull-level",
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "bugs": {
    "url": "https://github.com/dominictarr/pull-pushable/issues"
  },
  "dependencies": {},
  "description": "pull-stream with a push interface",
  "devDependencies": {
    "pull-stream": "^3.0.1",
    "standard": "^7.1.2",
    "tape": "^4.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "86666abbe3f5402f1f7ead03eefd69b785eca5b8",
    "tarball": "https://registry.npmjs.org/pull-pushable/-/pull-pushable-2.1.1.tgz"
  },
  "gitHead": "a633c809d314b9e1bdc8273c8dea4b9151550e48",
  "homepage": "https://github.com/dominictarr/pull-pushable",
  "license": "MIT",
  "maintainers": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "name": "pull-pushable",
  "optionalDependencies": {},
  "readme": "# pull-pushable\n\nA pull-stream with a pushable interface.\n\nUse this when you really can't pull from your source.\nFor example, often I like to have a \"live\" stream.\nThis would read a series of data, first old data,\nbut then stay open and read new data as it comes in.\n\nIn that case, the new data needs to be queued up while the old data is read,\nand also, the rate things are pushed into the queue doesn't affect the rate of reads.\n\nIf there is no realtime aspect to this stream, it's likely that you don't need pushable.\nInstead try just using `pull.values(array)`.\n\n## Example\n\n```js\nvar Pushable = require('pull-pushable')\nvar pull     = require('pull-stream')\nvar p = Pushable()\n\npull(p, pull.drain(console.log))\n\np.push(1)\np.end()\n```\n\nAlso, can provide a listener for when the stream is closed.\n\n```js\nvar Pushable = require('pull-pushable')\nvar pull     = require('pull-stream')\nvar p = Pushable(function (err) {\n  console.log('stream closed!')\n})\n\n//read 3 times then abort.\npull(p, pull.take(3), pull.drain(console.log))\n\np.push(1)\np.push(2)\np.push(3)\np.push(4) //stream will be aborted before this is output\n```\n\nWhen giving the stream away and you don't want the user to have the `push`/`end` functions,\nyou can pass a `separated` option.  It returns `{ push, end, source }`.\n\n```js\nfunction createStream () {\n  var p = Pushable(true) // optionally pass `onDone` after it\n\n  somethingAsync((err, data) => {\n    if (err) return p.end(err)\n    p.push(data)\n  })\n\n  return p.source\n}\n\nvar stream = createStream()\n// stream.push === undefined\n```\n\n## License\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/pull-pushable.git"
  },
  "scripts": {
    "test": "standard && tape test/*.js"
  },
  "version": "2.1.1"
}
